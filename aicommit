#!/bin/bash

# Define the model constant
MODEL="llama3.2"

# Optional issue ID
issue_id="${1:-}"

# Step 1: Fetch the last 10 commit messages and format them as a list
commit_history=$(git log -n 10 --pretty=format:'"%s",' | sed '$ s/,$//')
commit_history="[$commit_history]"

# Step 2: Check for staged changes
staged_diff=$(git diff --cached)
if [ -z "$staged_diff" ]; then
    echo "Error: No changes staged. Please use 'git add' to stage changes before committing."
    exit 1
fi

# Step 3: Extract the style from the previous commit messages
style_prompt="
# Task:
Analyze the following list of commit messages and describe their common stylistic features in terms of tone, length, structure, and use of language:
- $commit_history

# Output:
Provide a concise description of the style used in these commit messages. Be specific about length, tone (e.g., imperative), and any recurring patterns. Do NOT include any content from the commit messages themselves.
"

style_description=$(echo "$style_prompt" | ollama run "$MODEL")

# Step 4: Prepare the prompt for generating the commit message using the extracted style
prompt="
# Context
Based on the style description extracted from previous commit messages: $style_description

# Instructions:
1. Analyze the provided diff and generate a new commit message based solely on its content.
2. Mimic the style characteristics described above (length, tone, structure) without using any content from the previous commit messages.
3. Use action verbs (e.g., 'updated', 'refactored', 'added') and be concise in describing the changes.
4. **Output ONLY the commit message itself.** Do not include any explanations, introductions, formatting, or extra text.

# Current Diff:
<diff>$staged_diff</diff>

Commit message:"

# Check if the user wants to see the full prompt
if [ "$2" = "--show-prompt" ]; then
    echo "Full prompt for style extraction:"
    echo "$style_prompt"
    echo "Extracted Style Description:"
    echo "$style_description"
    echo "Full prompt for commit message generation:"
    echo "$prompt"
fi

# Step 5: Run Ollama with the second prompt (using the extracted style description)
suggested_commit=$(echo "$prompt" | ollama run "$MODEL")

# Step 6: Post-process the output to remove any unwanted text
suggested_commit=$(echo "$suggested_commit" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

# Prepend the issue ID if provided
if [ -n "$issue_id" ]; then
    final_commit_message="$issue_id - $suggested_commit"
else
    final_commit_message="$suggested_commit"
fi

# Step 7: Check if the final commit message is empty or the Ollama command failed
if [ -z "$suggested_commit" ]; then
    echo "Error: No suggested commit message was generated. Aborting."
    exit 1
fi

# Step 8: Show the output and confirm
echo "Suggested commit message: $final_commit_message"
read -p "Do you want to use this commit message? (y/n/e): " user_choice

case "$user_choice" in
    y|Y)
        # Confirm and commit
        git commit -m "$final_commit_message"
        ;;
    n|N)
        # Reject and exit
        echo "Commit aborted."
        exit 0
        ;;
    e|E)
        # Allow user to edit the suggested commit message in a temporary file
        temp_file=$(mktemp)
        echo "$final_commit_message" > "$temp_file"
        
        # Open the file with vi
        vi "$temp_file"
        
        # Check if the edited commit message is different from the original
        if diff -q "$temp_file" <(echo "$final_commit_message") >/dev/null; then
            echo "Aborting commit due to no changes made to the commit message."
            rm "$temp_file"
            exit 1
        fi

        # Read the edited content
        edited_commit=$(cat "$temp_file")
        
        # Clean up the temporary file
        rm "$temp_file"
        
        # Check if the edited commit message is empty
        if [ -z "$edited_commit" ]; then
            echo "Aborting commit due to empty commit message."
            exit 1
        fi
        
        # Commit with the edited message
        git commit -m "$edited_commit"
        ;;
    *)
        echo "Invalid choice, exiting."
        exit 1
        ;;
esac